/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
    assertAccountExists,
    assertAccountsExist,
    combineCodec,
    decodeAccount,
    fetchEncodedAccount,
    fetchEncodedAccounts,
    getAddressDecoder,
    getAddressEncoder,
    getArrayDecoder,
    getArrayEncoder,
    getBooleanDecoder,
    getBooleanEncoder,
    getStructDecoder,
    getStructEncoder,
    getU16Decoder,
    getU16Encoder,
    getU64Decoder,
    getU64Encoder,
    getU8Decoder,
    getU8Encoder,
    type Account,
    type Address,
    type Codec,
    type Decoder,
    type EncodedAccount,
    type Encoder,
    type FetchAccountConfig,
    type FetchAccountsConfig,
    type MaybeAccount,
    type MaybeEncodedAccount,
} from '@solana/kit';
import { findGlobalAdminPda } from '../pdas';

export type GlobalAdmin = {
    authority: Address;
    treasury: Address;
    team: Address;
    rewardsPool: Address;
    nativeTokenMint: Address;
    dailyEmissionRate: bigint;
    maxEmissionPerBond: bigint;
    maxBondsPerWallet: number;
    tokenDepositSplit: Array<number>;
    claimPenalty: number;
    pauseBondOperations: boolean;
};

export type GlobalAdminArgs = {
    authority: Address;
    treasury: Address;
    team: Address;
    rewardsPool: Address;
    nativeTokenMint: Address;
    dailyEmissionRate: number | bigint;
    maxEmissionPerBond: number | bigint;
    maxBondsPerWallet: number;
    tokenDepositSplit: Array<number>;
    claimPenalty: number;
    pauseBondOperations: boolean;
};

export function getGlobalAdminEncoder(): Encoder<GlobalAdminArgs> {
    return getStructEncoder([
        ['authority', getAddressEncoder()],
        ['treasury', getAddressEncoder()],
        ['team', getAddressEncoder()],
        ['rewardsPool', getAddressEncoder()],
        ['nativeTokenMint', getAddressEncoder()],
        ['dailyEmissionRate', getU64Encoder()],
        ['maxEmissionPerBond', getU64Encoder()],
        ['maxBondsPerWallet', getU8Encoder()],
        ['tokenDepositSplit', getArrayEncoder(getU16Encoder(), { size: 3 })],
        ['claimPenalty', getU16Encoder()],
        ['pauseBondOperations', getBooleanEncoder()],
    ]);
}

export function getGlobalAdminDecoder(): Decoder<GlobalAdmin> {
    return getStructDecoder([
        ['authority', getAddressDecoder()],
        ['treasury', getAddressDecoder()],
        ['team', getAddressDecoder()],
        ['rewardsPool', getAddressDecoder()],
        ['nativeTokenMint', getAddressDecoder()],
        ['dailyEmissionRate', getU64Decoder()],
        ['maxEmissionPerBond', getU64Decoder()],
        ['maxBondsPerWallet', getU8Decoder()],
        ['tokenDepositSplit', getArrayDecoder(getU16Decoder(), { size: 3 })],
        ['claimPenalty', getU16Decoder()],
        ['pauseBondOperations', getBooleanDecoder()],
    ]);
}

export function getGlobalAdminCodec(): Codec<GlobalAdminArgs, GlobalAdmin> {
    return combineCodec(getGlobalAdminEncoder(), getGlobalAdminDecoder());
}

export function decodeGlobalAdmin<TAddress extends string = string>(
    encodedAccount: EncodedAccount<TAddress>
): Account<GlobalAdmin, TAddress>;
export function decodeGlobalAdmin<TAddress extends string = string>(
    encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GlobalAdmin, TAddress>;
export function decodeGlobalAdmin<TAddress extends string = string>(
    encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GlobalAdmin, TAddress> | MaybeAccount<GlobalAdmin, TAddress> {
    return decodeAccount(
        encodedAccount as MaybeEncodedAccount<TAddress>,
        getGlobalAdminDecoder()
    );
}

export async function fetchGlobalAdmin<TAddress extends string = string>(
    rpc: Parameters<typeof fetchEncodedAccount>[0],
    address: Address<TAddress>,
    config?: FetchAccountConfig
): Promise<Account<GlobalAdmin, TAddress>> {
    const maybeAccount = await fetchMaybeGlobalAdmin(rpc, address, config);
    assertAccountExists(maybeAccount);
    return maybeAccount;
}

export async function fetchMaybeGlobalAdmin<TAddress extends string = string>(
    rpc: Parameters<typeof fetchEncodedAccount>[0],
    address: Address<TAddress>,
    config?: FetchAccountConfig
): Promise<MaybeAccount<GlobalAdmin, TAddress>> {
    const maybeAccount = await fetchEncodedAccount(rpc, address, config);
    return decodeGlobalAdmin(maybeAccount);
}

export async function fetchAllGlobalAdmin(
    rpc: Parameters<typeof fetchEncodedAccounts>[0],
    addresses: Array<Address>,
    config?: FetchAccountsConfig
): Promise<Account<GlobalAdmin>[]> {
    const maybeAccounts = await fetchAllMaybeGlobalAdmin(
        rpc,
        addresses,
        config
    );
    assertAccountsExist(maybeAccounts);
    return maybeAccounts;
}

export async function fetchAllMaybeGlobalAdmin(
    rpc: Parameters<typeof fetchEncodedAccounts>[0],
    addresses: Array<Address>,
    config?: FetchAccountsConfig
): Promise<MaybeAccount<GlobalAdmin>[]> {
    const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeGlobalAdmin(maybeAccount));
}

export function getGlobalAdminSize(): number {
    return 186;
}

export async function fetchGlobalAdminFromSeeds(
    rpc: Parameters<typeof fetchEncodedAccount>[0],
    config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<GlobalAdmin>> {
    const maybeAccount = await fetchMaybeGlobalAdminFromSeeds(rpc, config);
    assertAccountExists(maybeAccount);
    return maybeAccount;
}

export async function fetchMaybeGlobalAdminFromSeeds(
    rpc: Parameters<typeof fetchEncodedAccount>[0],
    config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<GlobalAdmin>> {
    const { programAddress, ...fetchConfig } = config;
    const [address] = await findGlobalAdminPda({ programAddress });
    return await fetchMaybeGlobalAdmin(rpc, address, fetchConfig);
}

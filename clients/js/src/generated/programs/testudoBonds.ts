/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
    containsBytes,
    getU8Encoder,
    type Address,
    type ReadonlyUint8Array,
} from '@solana/kit';
import {
    type ParsedCreateUserInstruction,
    type ParsedInitializeAdminInstruction,
    type ParsedInitializeBondInstruction,
    type ParsedProcessClaimInstruction,
    type ParsedUpdateAdminInstruction,
} from '../instructions';

export const TESTUDO_BONDS_PROGRAM_ADDRESS =
    'AV5obcm5Yavs4EebSrmonAAy2K83NZZK88gUn77wmK2' as Address<'AV5obcm5Yavs4EebSrmonAAy2K83NZZK88gUn77wmK2'>;

export enum TestudoBondsAccount {
    GlobalAdmin,
    UserPda,
    Bond,
}

export enum TestudoBondsInstruction {
    InitializeAdmin,
    CreateUser,
    InitializeBond,
    ProcessClaim,
    UpdateAdmin,
}

export function identifyTestudoBondsInstruction(
    instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TestudoBondsInstruction {
    const data = 'data' in instruction ? instruction.data : instruction;
    if (containsBytes(data, getU8Encoder().encode(0), 0)) {
        return TestudoBondsInstruction.InitializeAdmin;
    }
    if (containsBytes(data, getU8Encoder().encode(1), 0)) {
        return TestudoBondsInstruction.CreateUser;
    }
    if (containsBytes(data, getU8Encoder().encode(2), 0)) {
        return TestudoBondsInstruction.InitializeBond;
    }
    if (containsBytes(data, getU8Encoder().encode(3), 0)) {
        return TestudoBondsInstruction.ProcessClaim;
    }
    if (containsBytes(data, getU8Encoder().encode(4), 0)) {
        return TestudoBondsInstruction.UpdateAdmin;
    }
    throw new Error(
        'The provided instruction could not be identified as a testudoBonds instruction.'
    );
}

export type ParsedTestudoBondsInstruction<
    TProgram extends string = 'AV5obcm5Yavs4EebSrmonAAy2K83NZZK88gUn77wmK2',
> =
    | ({
          instructionType: TestudoBondsInstruction.InitializeAdmin;
      } & ParsedInitializeAdminInstruction<TProgram>)
    | ({
          instructionType: TestudoBondsInstruction.CreateUser;
      } & ParsedCreateUserInstruction<TProgram>)
    | ({
          instructionType: TestudoBondsInstruction.InitializeBond;
      } & ParsedInitializeBondInstruction<TProgram>)
    | ({
          instructionType: TestudoBondsInstruction.ProcessClaim;
      } & ParsedProcessClaimInstruction<TProgram>)
    | ({
          instructionType: TestudoBondsInstruction.UpdateAdmin;
      } & ParsedUpdateAdminInstruction<TProgram>);

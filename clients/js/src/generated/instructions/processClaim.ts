/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
    combineCodec,
    getBooleanDecoder,
    getBooleanEncoder,
    getStructDecoder,
    getStructEncoder,
    getU8Decoder,
    getU8Encoder,
    transformEncoder,
    type AccountMeta,
    type AccountSignerMeta,
    type Address,
    type FixedSizeCodec,
    type FixedSizeDecoder,
    type FixedSizeEncoder,
    type Instruction,
    type InstructionWithAccounts,
    type InstructionWithData,
    type ReadonlyAccount,
    type ReadonlySignerAccount,
    type ReadonlyUint8Array,
    type TransactionSigner,
    type WritableAccount,
} from '@solana/kit';
import { findBondPda, findGlobalAdminPda, findUserPdaPda } from '../pdas';
import { TESTUDO_BONDS_PROGRAM_ADDRESS } from '../programs';
import {
    expectAddress,
    expectSome,
    getAccountMetaFactory,
    type ResolvedAccount,
} from '../shared';

export const PROCESS_CLAIM_DISCRIMINATOR = 3;

export function getProcessClaimDiscriminatorBytes() {
    return getU8Encoder().encode(PROCESS_CLAIM_DISCRIMINATOR);
}

export type ProcessClaimInstruction<
    TProgram extends string = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
    TAccountBond extends string | AccountMeta<string> = string,
    TAccountUserWallet extends string | AccountMeta<string> = string,
    TAccountUserPda extends string | AccountMeta<string> = string,
    TAccountUserWalletAta extends string | AccountMeta<string> = string,
    TAccountGlobalAdmin extends string | AccountMeta<string> = string,
    TAccountRewardsPoolAta extends string | AccountMeta<string> = string,
    TAccountTreasuryAta extends string | AccountMeta<string> = string,
    TAccountTeamAta extends string | AccountMeta<string> = string,
    TAccountNewBondPda extends string | AccountMeta<string> = string,
    TAccountNativeTokenMint extends string | AccountMeta<string> = string,
    TAccountTokenProgram extends
        | string
        | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
    TAccountAssociatedTokenProgram extends
        | string
        | AccountMeta<string> = string,
    TAccountSystemProgram extends
        | string
        | AccountMeta<string> = '11111111111111111111111111111111',
    TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
    InstructionWithData<ReadonlyUint8Array> &
    InstructionWithAccounts<
        [
            TAccountBond extends string
                ? WritableAccount<TAccountBond>
                : TAccountBond,
            TAccountUserWallet extends string
                ? ReadonlySignerAccount<TAccountUserWallet> &
                      AccountSignerMeta<TAccountUserWallet>
                : TAccountUserWallet,
            TAccountUserPda extends string
                ? WritableAccount<TAccountUserPda>
                : TAccountUserPda,
            TAccountUserWalletAta extends string
                ? WritableAccount<TAccountUserWalletAta>
                : TAccountUserWalletAta,
            TAccountGlobalAdmin extends string
                ? ReadonlyAccount<TAccountGlobalAdmin>
                : TAccountGlobalAdmin,
            TAccountRewardsPoolAta extends string
                ? WritableAccount<TAccountRewardsPoolAta>
                : TAccountRewardsPoolAta,
            TAccountTreasuryAta extends string
                ? WritableAccount<TAccountTreasuryAta>
                : TAccountTreasuryAta,
            TAccountTeamAta extends string
                ? WritableAccount<TAccountTeamAta>
                : TAccountTeamAta,
            TAccountNewBondPda extends string
                ? WritableAccount<TAccountNewBondPda>
                : TAccountNewBondPda,
            TAccountNativeTokenMint extends string
                ? ReadonlyAccount<TAccountNativeTokenMint>
                : TAccountNativeTokenMint,
            TAccountTokenProgram extends string
                ? ReadonlyAccount<TAccountTokenProgram>
                : TAccountTokenProgram,
            TAccountAssociatedTokenProgram extends string
                ? ReadonlyAccount<TAccountAssociatedTokenProgram>
                : TAccountAssociatedTokenProgram,
            TAccountSystemProgram extends string
                ? ReadonlyAccount<TAccountSystemProgram>
                : TAccountSystemProgram,
            ...TRemainingAccounts,
        ]
    >;

export type ProcessClaimInstructionData = {
    discriminator: number;
    bondIndex: number;
    autoCompound: boolean;
};

export type ProcessClaimInstructionDataArgs = {
    bondIndex: number;
    autoCompound: boolean;
};

export function getProcessClaimInstructionDataEncoder(): FixedSizeEncoder<ProcessClaimInstructionDataArgs> {
    return transformEncoder(
        getStructEncoder([
            ['discriminator', getU8Encoder()],
            ['bondIndex', getU8Encoder()],
            ['autoCompound', getBooleanEncoder()],
        ]),
        (value) => ({ ...value, discriminator: PROCESS_CLAIM_DISCRIMINATOR })
    );
}

export function getProcessClaimInstructionDataDecoder(): FixedSizeDecoder<ProcessClaimInstructionData> {
    return getStructDecoder([
        ['discriminator', getU8Decoder()],
        ['bondIndex', getU8Decoder()],
        ['autoCompound', getBooleanDecoder()],
    ]);
}

export function getProcessClaimInstructionDataCodec(): FixedSizeCodec<
    ProcessClaimInstructionDataArgs,
    ProcessClaimInstructionData
> {
    return combineCodec(
        getProcessClaimInstructionDataEncoder(),
        getProcessClaimInstructionDataDecoder()
    );
}

export type ProcessClaimAsyncInput<
    TAccountBond extends string = string,
    TAccountUserWallet extends string = string,
    TAccountUserPda extends string = string,
    TAccountUserWalletAta extends string = string,
    TAccountGlobalAdmin extends string = string,
    TAccountRewardsPoolAta extends string = string,
    TAccountTreasuryAta extends string = string,
    TAccountTeamAta extends string = string,
    TAccountNewBondPda extends string = string,
    TAccountNativeTokenMint extends string = string,
    TAccountTokenProgram extends string = string,
    TAccountAssociatedTokenProgram extends string = string,
    TAccountSystemProgram extends string = string,
> = {
    /** The program derived address of the bond account to claim rewards from (seeds: ['bond', user_pda, bond_index]) */
    bond?: Address<TAccountBond>;
    /** The wallet of the user */
    userWallet: TransactionSigner<TAccountUserWallet>;
    /** The user's pda */
    userPda?: Address<TAccountUserPda>;
    /** The user's wallet token account */
    userWalletAta: Address<TAccountUserWalletAta>;
    /** The global admin account */
    globalAdmin?: Address<TAccountGlobalAdmin>;
    /** The rewards pool (token account) of the global admin */
    rewardsPoolAta: Address<TAccountRewardsPoolAta>;
    /** The token account of the treasury */
    treasuryAta: Address<TAccountTreasuryAta>;
    /** The token account of the team */
    teamAta: Address<TAccountTeamAta>;
    /** The program derived address for the new bond to be auto-compounded (seeds: ['bond', user_pda, next_bond_index]) */
    newBondPda?: Address<TAccountNewBondPda>;
    /** The native token mint */
    nativeTokenMint: Address<TAccountNativeTokenMint>;
    /** The token program */
    tokenProgram?: Address<TAccountTokenProgram>;
    /** The associated token program (for the rewards pool) */
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    bondIndex: ProcessClaimInstructionDataArgs['bondIndex'];
    autoCompound: ProcessClaimInstructionDataArgs['autoCompound'];
};

export async function getProcessClaimInstructionAsync<
    TAccountBond extends string,
    TAccountUserWallet extends string,
    TAccountUserPda extends string,
    TAccountUserWalletAta extends string,
    TAccountGlobalAdmin extends string,
    TAccountRewardsPoolAta extends string,
    TAccountTreasuryAta extends string,
    TAccountTeamAta extends string,
    TAccountNewBondPda extends string,
    TAccountNativeTokenMint extends string,
    TAccountTokenProgram extends string,
    TAccountAssociatedTokenProgram extends string,
    TAccountSystemProgram extends string,
    TProgramAddress extends Address = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
>(
    input: ProcessClaimAsyncInput<
        TAccountBond,
        TAccountUserWallet,
        TAccountUserPda,
        TAccountUserWalletAta,
        TAccountGlobalAdmin,
        TAccountRewardsPoolAta,
        TAccountTreasuryAta,
        TAccountTeamAta,
        TAccountNewBondPda,
        TAccountNativeTokenMint,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram,
        TAccountSystemProgram
    >,
    config?: { programAddress?: TProgramAddress }
): Promise<
    ProcessClaimInstruction<
        TProgramAddress,
        TAccountBond,
        TAccountUserWallet,
        TAccountUserPda,
        TAccountUserWalletAta,
        TAccountGlobalAdmin,
        TAccountRewardsPoolAta,
        TAccountTreasuryAta,
        TAccountTeamAta,
        TAccountNewBondPda,
        TAccountNativeTokenMint,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram,
        TAccountSystemProgram
    >
> {
    // Program address.
    const programAddress =
        config?.programAddress ?? TESTUDO_BONDS_PROGRAM_ADDRESS;

    // Original accounts.
    const originalAccounts = {
        bond: { value: input.bond ?? null, isWritable: true },
        userWallet: { value: input.userWallet ?? null, isWritable: false },
        userPda: { value: input.userPda ?? null, isWritable: true },
        userWalletAta: { value: input.userWalletAta ?? null, isWritable: true },
        globalAdmin: { value: input.globalAdmin ?? null, isWritable: false },
        rewardsPoolAta: {
            value: input.rewardsPoolAta ?? null,
            isWritable: true,
        },
        treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
        teamAta: { value: input.teamAta ?? null, isWritable: true },
        newBondPda: { value: input.newBondPda ?? null, isWritable: true },
        nativeTokenMint: {
            value: input.nativeTokenMint ?? null,
            isWritable: false,
        },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
        associatedTokenProgram: {
            value: input.associatedTokenProgram ?? null,
            isWritable: false,
        },
        systemProgram: {
            value: input.systemProgram ?? null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts as Record<
        keyof typeof originalAccounts,
        ResolvedAccount
    >;

    // Original args.
    const args = { ...input };

    // Resolve default values.
    if (!accounts.userPda.value) {
        accounts.userPda.value = await findUserPdaPda({
            userWallet: expectAddress(accounts.userWallet.value),
        });
    }
    if (!accounts.bond.value) {
        accounts.bond.value = await findBondPda({
            userPda: expectAddress(accounts.userPda.value),
            bondIndex: expectSome(args.bondIndex),
        });
    }
    if (!accounts.globalAdmin.value) {
        accounts.globalAdmin.value = await findGlobalAdminPda();
    }
    if (!accounts.newBondPda.value) {
        accounts.newBondPda.value = await findBondPda({
            userPda: expectAddress(accounts.userPda.value),
            bondIndex: expectSome(args.bondIndex),
        });
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
    }

    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.bond),
            getAccountMeta(accounts.userWallet),
            getAccountMeta(accounts.userPda),
            getAccountMeta(accounts.userWalletAta),
            getAccountMeta(accounts.globalAdmin),
            getAccountMeta(accounts.rewardsPoolAta),
            getAccountMeta(accounts.treasuryAta),
            getAccountMeta(accounts.teamAta),
            getAccountMeta(accounts.newBondPda),
            getAccountMeta(accounts.nativeTokenMint),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getProcessClaimInstructionDataEncoder().encode(
            args as ProcessClaimInstructionDataArgs
        ),
    } as ProcessClaimInstruction<
        TProgramAddress,
        TAccountBond,
        TAccountUserWallet,
        TAccountUserPda,
        TAccountUserWalletAta,
        TAccountGlobalAdmin,
        TAccountRewardsPoolAta,
        TAccountTreasuryAta,
        TAccountTeamAta,
        TAccountNewBondPda,
        TAccountNativeTokenMint,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram,
        TAccountSystemProgram
    >;

    return instruction;
}

export type ProcessClaimInput<
    TAccountBond extends string = string,
    TAccountUserWallet extends string = string,
    TAccountUserPda extends string = string,
    TAccountUserWalletAta extends string = string,
    TAccountGlobalAdmin extends string = string,
    TAccountRewardsPoolAta extends string = string,
    TAccountTreasuryAta extends string = string,
    TAccountTeamAta extends string = string,
    TAccountNewBondPda extends string = string,
    TAccountNativeTokenMint extends string = string,
    TAccountTokenProgram extends string = string,
    TAccountAssociatedTokenProgram extends string = string,
    TAccountSystemProgram extends string = string,
> = {
    /** The program derived address of the bond account to claim rewards from (seeds: ['bond', user_pda, bond_index]) */
    bond: Address<TAccountBond>;
    /** The wallet of the user */
    userWallet: TransactionSigner<TAccountUserWallet>;
    /** The user's pda */
    userPda: Address<TAccountUserPda>;
    /** The user's wallet token account */
    userWalletAta: Address<TAccountUserWalletAta>;
    /** The global admin account */
    globalAdmin: Address<TAccountGlobalAdmin>;
    /** The rewards pool (token account) of the global admin */
    rewardsPoolAta: Address<TAccountRewardsPoolAta>;
    /** The token account of the treasury */
    treasuryAta: Address<TAccountTreasuryAta>;
    /** The token account of the team */
    teamAta: Address<TAccountTeamAta>;
    /** The program derived address for the new bond to be auto-compounded (seeds: ['bond', user_pda, next_bond_index]) */
    newBondPda: Address<TAccountNewBondPda>;
    /** The native token mint */
    nativeTokenMint: Address<TAccountNativeTokenMint>;
    /** The token program */
    tokenProgram?: Address<TAccountTokenProgram>;
    /** The associated token program (for the rewards pool) */
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    bondIndex: ProcessClaimInstructionDataArgs['bondIndex'];
    autoCompound: ProcessClaimInstructionDataArgs['autoCompound'];
};

export function getProcessClaimInstruction<
    TAccountBond extends string,
    TAccountUserWallet extends string,
    TAccountUserPda extends string,
    TAccountUserWalletAta extends string,
    TAccountGlobalAdmin extends string,
    TAccountRewardsPoolAta extends string,
    TAccountTreasuryAta extends string,
    TAccountTeamAta extends string,
    TAccountNewBondPda extends string,
    TAccountNativeTokenMint extends string,
    TAccountTokenProgram extends string,
    TAccountAssociatedTokenProgram extends string,
    TAccountSystemProgram extends string,
    TProgramAddress extends Address = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
>(
    input: ProcessClaimInput<
        TAccountBond,
        TAccountUserWallet,
        TAccountUserPda,
        TAccountUserWalletAta,
        TAccountGlobalAdmin,
        TAccountRewardsPoolAta,
        TAccountTreasuryAta,
        TAccountTeamAta,
        TAccountNewBondPda,
        TAccountNativeTokenMint,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram,
        TAccountSystemProgram
    >,
    config?: { programAddress?: TProgramAddress }
): ProcessClaimInstruction<
    TProgramAddress,
    TAccountBond,
    TAccountUserWallet,
    TAccountUserPda,
    TAccountUserWalletAta,
    TAccountGlobalAdmin,
    TAccountRewardsPoolAta,
    TAccountTreasuryAta,
    TAccountTeamAta,
    TAccountNewBondPda,
    TAccountNativeTokenMint,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
> {
    // Program address.
    const programAddress =
        config?.programAddress ?? TESTUDO_BONDS_PROGRAM_ADDRESS;

    // Original accounts.
    const originalAccounts = {
        bond: { value: input.bond ?? null, isWritable: true },
        userWallet: { value: input.userWallet ?? null, isWritable: false },
        userPda: { value: input.userPda ?? null, isWritable: true },
        userWalletAta: { value: input.userWalletAta ?? null, isWritable: true },
        globalAdmin: { value: input.globalAdmin ?? null, isWritable: false },
        rewardsPoolAta: {
            value: input.rewardsPoolAta ?? null,
            isWritable: true,
        },
        treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
        teamAta: { value: input.teamAta ?? null, isWritable: true },
        newBondPda: { value: input.newBondPda ?? null, isWritable: true },
        nativeTokenMint: {
            value: input.nativeTokenMint ?? null,
            isWritable: false,
        },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
        associatedTokenProgram: {
            value: input.associatedTokenProgram ?? null,
            isWritable: false,
        },
        systemProgram: {
            value: input.systemProgram ?? null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts as Record<
        keyof typeof originalAccounts,
        ResolvedAccount
    >;

    // Original args.
    const args = { ...input };

    // Resolve default values.
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
    }

    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.bond),
            getAccountMeta(accounts.userWallet),
            getAccountMeta(accounts.userPda),
            getAccountMeta(accounts.userWalletAta),
            getAccountMeta(accounts.globalAdmin),
            getAccountMeta(accounts.rewardsPoolAta),
            getAccountMeta(accounts.treasuryAta),
            getAccountMeta(accounts.teamAta),
            getAccountMeta(accounts.newBondPda),
            getAccountMeta(accounts.nativeTokenMint),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getProcessClaimInstructionDataEncoder().encode(
            args as ProcessClaimInstructionDataArgs
        ),
    } as ProcessClaimInstruction<
        TProgramAddress,
        TAccountBond,
        TAccountUserWallet,
        TAccountUserPda,
        TAccountUserWalletAta,
        TAccountGlobalAdmin,
        TAccountRewardsPoolAta,
        TAccountTreasuryAta,
        TAccountTeamAta,
        TAccountNewBondPda,
        TAccountNativeTokenMint,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram,
        TAccountSystemProgram
    >;

    return instruction;
}

export type ParsedProcessClaimInstruction<
    TProgram extends string = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
    TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The program derived address of the bond account to claim rewards from (seeds: ['bond', user_pda, bond_index]) */
        bond: TAccountMetas[0];
        /** The wallet of the user */
        userWallet: TAccountMetas[1];
        /** The user's pda */
        userPda: TAccountMetas[2];
        /** The user's wallet token account */
        userWalletAta: TAccountMetas[3];
        /** The global admin account */
        globalAdmin: TAccountMetas[4];
        /** The rewards pool (token account) of the global admin */
        rewardsPoolAta: TAccountMetas[5];
        /** The token account of the treasury */
        treasuryAta: TAccountMetas[6];
        /** The token account of the team */
        teamAta: TAccountMetas[7];
        /** The program derived address for the new bond to be auto-compounded (seeds: ['bond', user_pda, next_bond_index]) */
        newBondPda: TAccountMetas[8];
        /** The native token mint */
        nativeTokenMint: TAccountMetas[9];
        /** The token program */
        tokenProgram: TAccountMetas[10];
        /** The associated token program (for the rewards pool) */
        associatedTokenProgram: TAccountMetas[11];
        /** The system program */
        systemProgram: TAccountMetas[12];
    };
    data: ProcessClaimInstructionData;
};

export function parseProcessClaimInstruction<
    TProgram extends string,
    TAccountMetas extends readonly AccountMeta[],
>(
    instruction: Instruction<TProgram> &
        InstructionWithAccounts<TAccountMetas> &
        InstructionWithData<ReadonlyUint8Array>
): ParsedProcessClaimInstruction<TProgram, TAccountMetas> {
    if (instruction.accounts.length < 13) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts![accountIndex]!;
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            bond: getNextAccount(),
            userWallet: getNextAccount(),
            userPda: getNextAccount(),
            userWalletAta: getNextAccount(),
            globalAdmin: getNextAccount(),
            rewardsPoolAta: getNextAccount(),
            treasuryAta: getNextAccount(),
            teamAta: getNextAccount(),
            newBondPda: getNextAccount(),
            nativeTokenMint: getNextAccount(),
            tokenProgram: getNextAccount(),
            associatedTokenProgram: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getProcessClaimInstructionDataDecoder().decode(instruction.data),
    };
}

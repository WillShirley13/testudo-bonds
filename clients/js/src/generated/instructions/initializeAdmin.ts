/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
    BASE_ACCOUNT_SIZE,
    combineCodec,
    getStructDecoder,
    getStructEncoder,
    getU8Decoder,
    getU8Encoder,
    transformEncoder,
    type AccountMeta,
    type AccountSignerMeta,
    type Address,
    type FixedSizeCodec,
    type FixedSizeDecoder,
    type FixedSizeEncoder,
    type Instruction,
    type InstructionWithAccounts,
    type InstructionWithData,
    type ReadonlyAccount,
    type ReadonlySignerAccount,
    type ReadonlyUint8Array,
    type TransactionSigner,
    type WritableAccount,
} from '@solana/kit';
import { getGlobalAdminSize } from '../accounts';
import { findGlobalAdminPda } from '../pdas';
import { TESTUDO_BONDS_PROGRAM_ADDRESS } from '../programs';
import {
    getAccountMetaFactory,
    type InstructionWithByteDelta,
    type ResolvedAccount,
} from '../shared';

export const INITIALIZE_ADMIN_DISCRIMINATOR = 0;

export function getInitializeAdminDiscriminatorBytes() {
    return getU8Encoder().encode(INITIALIZE_ADMIN_DISCRIMINATOR);
}

export type InitializeAdminInstruction<
    TProgram extends string = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
    TAccountGlobalAdmin extends string | AccountMeta<string> = string,
    TAccountAuthority extends string | AccountMeta<string> = string,
    TAccountRewardsPoolAta extends string | AccountMeta<string> = string,
    TAccountTreasury extends string | AccountMeta<string> = string,
    TAccountTreasuryAta extends string | AccountMeta<string> = string,
    TAccountTeam extends string | AccountMeta<string> = string,
    TAccountTeamAta extends string | AccountMeta<string> = string,
    TAccountNativeTokenMint extends string | AccountMeta<string> = string,
    TAccountSystemProgram extends
        | string
        | AccountMeta<string> = '11111111111111111111111111111111',
    TAccountTokenProgram extends
        | string
        | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
    TAccountAssociatedTokenProgram extends
        | string
        | AccountMeta<string> = string,
    TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
    InstructionWithData<ReadonlyUint8Array> &
    InstructionWithAccounts<
        [
            TAccountGlobalAdmin extends string
                ? WritableAccount<TAccountGlobalAdmin>
                : TAccountGlobalAdmin,
            TAccountAuthority extends string
                ? ReadonlySignerAccount<TAccountAuthority> &
                      AccountSignerMeta<TAccountAuthority>
                : TAccountAuthority,
            TAccountRewardsPoolAta extends string
                ? WritableAccount<TAccountRewardsPoolAta>
                : TAccountRewardsPoolAta,
            TAccountTreasury extends string
                ? ReadonlyAccount<TAccountTreasury>
                : TAccountTreasury,
            TAccountTreasuryAta extends string
                ? WritableAccount<TAccountTreasuryAta>
                : TAccountTreasuryAta,
            TAccountTeam extends string
                ? ReadonlyAccount<TAccountTeam>
                : TAccountTeam,
            TAccountTeamAta extends string
                ? WritableAccount<TAccountTeamAta>
                : TAccountTeamAta,
            TAccountNativeTokenMint extends string
                ? ReadonlyAccount<TAccountNativeTokenMint>
                : TAccountNativeTokenMint,
            TAccountSystemProgram extends string
                ? ReadonlyAccount<TAccountSystemProgram>
                : TAccountSystemProgram,
            TAccountTokenProgram extends string
                ? ReadonlyAccount<TAccountTokenProgram>
                : TAccountTokenProgram,
            TAccountAssociatedTokenProgram extends string
                ? ReadonlyAccount<TAccountAssociatedTokenProgram>
                : TAccountAssociatedTokenProgram,
            ...TRemainingAccounts,
        ]
    >;

export type InitializeAdminInstructionData = { discriminator: number };

export type InitializeAdminInstructionDataArgs = {};

export function getInitializeAdminInstructionDataEncoder(): FixedSizeEncoder<InitializeAdminInstructionDataArgs> {
    return transformEncoder(
        getStructEncoder([['discriminator', getU8Encoder()]]),
        (value) => ({ ...value, discriminator: INITIALIZE_ADMIN_DISCRIMINATOR })
    );
}

export function getInitializeAdminInstructionDataDecoder(): FixedSizeDecoder<InitializeAdminInstructionData> {
    return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeAdminInstructionDataCodec(): FixedSizeCodec<
    InitializeAdminInstructionDataArgs,
    InitializeAdminInstructionData
> {
    return combineCodec(
        getInitializeAdminInstructionDataEncoder(),
        getInitializeAdminInstructionDataDecoder()
    );
}

export type InitializeAdminAsyncInput<
    TAccountGlobalAdmin extends string = string,
    TAccountAuthority extends string = string,
    TAccountRewardsPoolAta extends string = string,
    TAccountTreasury extends string = string,
    TAccountTreasuryAta extends string = string,
    TAccountTeam extends string = string,
    TAccountTeamAta extends string = string,
    TAccountNativeTokenMint extends string = string,
    TAccountSystemProgram extends string = string,
    TAccountTokenProgram extends string = string,
    TAccountAssociatedTokenProgram extends string = string,
> = {
    /** The program derived address of the global admin account to create (seeds: ['global_admin']) */
    globalAdmin?: Address<TAccountGlobalAdmin>;
    /** The authority of the global admin */
    authority: TransactionSigner<TAccountAuthority>;
    /** The rewards pool (token account) of the global admin */
    rewardsPoolAta: Address<TAccountRewardsPoolAta>;
    /** The treasury account */
    treasury: Address<TAccountTreasury>;
    /** The token account of the treasury */
    treasuryAta: Address<TAccountTreasuryAta>;
    /** The team account */
    team: Address<TAccountTeam>;
    /** The token account of the team */
    teamAta: Address<TAccountTeamAta>;
    /** The native token mint */
    nativeTokenMint: Address<TAccountNativeTokenMint>;
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The token program */
    tokenProgram?: Address<TAccountTokenProgram>;
    /** The associated token program */
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
};

export async function getInitializeAdminInstructionAsync<
    TAccountGlobalAdmin extends string,
    TAccountAuthority extends string,
    TAccountRewardsPoolAta extends string,
    TAccountTreasury extends string,
    TAccountTreasuryAta extends string,
    TAccountTeam extends string,
    TAccountTeamAta extends string,
    TAccountNativeTokenMint extends string,
    TAccountSystemProgram extends string,
    TAccountTokenProgram extends string,
    TAccountAssociatedTokenProgram extends string,
    TProgramAddress extends Address = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
>(
    input: InitializeAdminAsyncInput<
        TAccountGlobalAdmin,
        TAccountAuthority,
        TAccountRewardsPoolAta,
        TAccountTreasury,
        TAccountTreasuryAta,
        TAccountTeam,
        TAccountTeamAta,
        TAccountNativeTokenMint,
        TAccountSystemProgram,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram
    >,
    config?: { programAddress?: TProgramAddress }
): Promise<
    InitializeAdminInstruction<
        TProgramAddress,
        TAccountGlobalAdmin,
        TAccountAuthority,
        TAccountRewardsPoolAta,
        TAccountTreasury,
        TAccountTreasuryAta,
        TAccountTeam,
        TAccountTeamAta,
        TAccountNativeTokenMint,
        TAccountSystemProgram,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram
    > &
        InstructionWithByteDelta
> {
    // Program address.
    const programAddress =
        config?.programAddress ?? TESTUDO_BONDS_PROGRAM_ADDRESS;

    // Original accounts.
    const originalAccounts = {
        globalAdmin: { value: input.globalAdmin ?? null, isWritable: true },
        authority: { value: input.authority ?? null, isWritable: false },
        rewardsPoolAta: {
            value: input.rewardsPoolAta ?? null,
            isWritable: true,
        },
        treasury: { value: input.treasury ?? null, isWritable: false },
        treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
        team: { value: input.team ?? null, isWritable: false },
        teamAta: { value: input.teamAta ?? null, isWritable: true },
        nativeTokenMint: {
            value: input.nativeTokenMint ?? null,
            isWritable: false,
        },
        systemProgram: {
            value: input.systemProgram ?? null,
            isWritable: false,
        },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
        associatedTokenProgram: {
            value: input.associatedTokenProgram ?? null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts as Record<
        keyof typeof originalAccounts,
        ResolvedAccount
    >;

    // Resolve default values.
    if (!accounts.globalAdmin.value) {
        accounts.globalAdmin.value = await findGlobalAdminPda();
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
    }

    // Bytes created or reallocated by the instruction.
    const byteDelta: number = [getGlobalAdminSize() + BASE_ACCOUNT_SIZE].reduce(
        (a, b) => a + b,
        0
    );

    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.globalAdmin),
            getAccountMeta(accounts.authority),
            getAccountMeta(accounts.rewardsPoolAta),
            getAccountMeta(accounts.treasury),
            getAccountMeta(accounts.treasuryAta),
            getAccountMeta(accounts.team),
            getAccountMeta(accounts.teamAta),
            getAccountMeta(accounts.nativeTokenMint),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
        ],
        programAddress,
        data: getInitializeAdminInstructionDataEncoder().encode({}),
    } as InitializeAdminInstruction<
        TProgramAddress,
        TAccountGlobalAdmin,
        TAccountAuthority,
        TAccountRewardsPoolAta,
        TAccountTreasury,
        TAccountTreasuryAta,
        TAccountTeam,
        TAccountTeamAta,
        TAccountNativeTokenMint,
        TAccountSystemProgram,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram
    >;

    return Object.freeze({ ...instruction, byteDelta });
}

export type InitializeAdminInput<
    TAccountGlobalAdmin extends string = string,
    TAccountAuthority extends string = string,
    TAccountRewardsPoolAta extends string = string,
    TAccountTreasury extends string = string,
    TAccountTreasuryAta extends string = string,
    TAccountTeam extends string = string,
    TAccountTeamAta extends string = string,
    TAccountNativeTokenMint extends string = string,
    TAccountSystemProgram extends string = string,
    TAccountTokenProgram extends string = string,
    TAccountAssociatedTokenProgram extends string = string,
> = {
    /** The program derived address of the global admin account to create (seeds: ['global_admin']) */
    globalAdmin: Address<TAccountGlobalAdmin>;
    /** The authority of the global admin */
    authority: TransactionSigner<TAccountAuthority>;
    /** The rewards pool (token account) of the global admin */
    rewardsPoolAta: Address<TAccountRewardsPoolAta>;
    /** The treasury account */
    treasury: Address<TAccountTreasury>;
    /** The token account of the treasury */
    treasuryAta: Address<TAccountTreasuryAta>;
    /** The team account */
    team: Address<TAccountTeam>;
    /** The token account of the team */
    teamAta: Address<TAccountTeamAta>;
    /** The native token mint */
    nativeTokenMint: Address<TAccountNativeTokenMint>;
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The token program */
    tokenProgram?: Address<TAccountTokenProgram>;
    /** The associated token program */
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
};

export function getInitializeAdminInstruction<
    TAccountGlobalAdmin extends string,
    TAccountAuthority extends string,
    TAccountRewardsPoolAta extends string,
    TAccountTreasury extends string,
    TAccountTreasuryAta extends string,
    TAccountTeam extends string,
    TAccountTeamAta extends string,
    TAccountNativeTokenMint extends string,
    TAccountSystemProgram extends string,
    TAccountTokenProgram extends string,
    TAccountAssociatedTokenProgram extends string,
    TProgramAddress extends Address = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
>(
    input: InitializeAdminInput<
        TAccountGlobalAdmin,
        TAccountAuthority,
        TAccountRewardsPoolAta,
        TAccountTreasury,
        TAccountTreasuryAta,
        TAccountTeam,
        TAccountTeamAta,
        TAccountNativeTokenMint,
        TAccountSystemProgram,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram
    >,
    config?: { programAddress?: TProgramAddress }
): InitializeAdminInstruction<
    TProgramAddress,
    TAccountGlobalAdmin,
    TAccountAuthority,
    TAccountRewardsPoolAta,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountTeam,
    TAccountTeamAta,
    TAccountNativeTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
> &
    InstructionWithByteDelta {
    // Program address.
    const programAddress =
        config?.programAddress ?? TESTUDO_BONDS_PROGRAM_ADDRESS;

    // Original accounts.
    const originalAccounts = {
        globalAdmin: { value: input.globalAdmin ?? null, isWritable: true },
        authority: { value: input.authority ?? null, isWritable: false },
        rewardsPoolAta: {
            value: input.rewardsPoolAta ?? null,
            isWritable: true,
        },
        treasury: { value: input.treasury ?? null, isWritable: false },
        treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
        team: { value: input.team ?? null, isWritable: false },
        teamAta: { value: input.teamAta ?? null, isWritable: true },
        nativeTokenMint: {
            value: input.nativeTokenMint ?? null,
            isWritable: false,
        },
        systemProgram: {
            value: input.systemProgram ?? null,
            isWritable: false,
        },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
        associatedTokenProgram: {
            value: input.associatedTokenProgram ?? null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts as Record<
        keyof typeof originalAccounts,
        ResolvedAccount
    >;

    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
    }

    // Bytes created or reallocated by the instruction.
    const byteDelta: number = [getGlobalAdminSize() + BASE_ACCOUNT_SIZE].reduce(
        (a, b) => a + b,
        0
    );

    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.globalAdmin),
            getAccountMeta(accounts.authority),
            getAccountMeta(accounts.rewardsPoolAta),
            getAccountMeta(accounts.treasury),
            getAccountMeta(accounts.treasuryAta),
            getAccountMeta(accounts.team),
            getAccountMeta(accounts.teamAta),
            getAccountMeta(accounts.nativeTokenMint),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
        ],
        programAddress,
        data: getInitializeAdminInstructionDataEncoder().encode({}),
    } as InitializeAdminInstruction<
        TProgramAddress,
        TAccountGlobalAdmin,
        TAccountAuthority,
        TAccountRewardsPoolAta,
        TAccountTreasury,
        TAccountTreasuryAta,
        TAccountTeam,
        TAccountTeamAta,
        TAccountNativeTokenMint,
        TAccountSystemProgram,
        TAccountTokenProgram,
        TAccountAssociatedTokenProgram
    >;

    return Object.freeze({ ...instruction, byteDelta });
}

export type ParsedInitializeAdminInstruction<
    TProgram extends string = typeof TESTUDO_BONDS_PROGRAM_ADDRESS,
    TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The program derived address of the global admin account to create (seeds: ['global_admin']) */
        globalAdmin: TAccountMetas[0];
        /** The authority of the global admin */
        authority: TAccountMetas[1];
        /** The rewards pool (token account) of the global admin */
        rewardsPoolAta: TAccountMetas[2];
        /** The treasury account */
        treasury: TAccountMetas[3];
        /** The token account of the treasury */
        treasuryAta: TAccountMetas[4];
        /** The team account */
        team: TAccountMetas[5];
        /** The token account of the team */
        teamAta: TAccountMetas[6];
        /** The native token mint */
        nativeTokenMint: TAccountMetas[7];
        /** The system program */
        systemProgram: TAccountMetas[8];
        /** The token program */
        tokenProgram: TAccountMetas[9];
        /** The associated token program */
        associatedTokenProgram: TAccountMetas[10];
    };
    data: InitializeAdminInstructionData;
};

export function parseInitializeAdminInstruction<
    TProgram extends string,
    TAccountMetas extends readonly AccountMeta[],
>(
    instruction: Instruction<TProgram> &
        InstructionWithAccounts<TAccountMetas> &
        InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeAdminInstruction<TProgram, TAccountMetas> {
    if (instruction.accounts.length < 11) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts![accountIndex]!;
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            globalAdmin: getNextAccount(),
            authority: getNextAccount(),
            rewardsPoolAta: getNextAccount(),
            treasury: getNextAccount(),
            treasuryAta: getNextAccount(),
            team: getNextAccount(),
            teamAta: getNextAccount(),
            nativeTokenMint: getNextAccount(),
            systemProgram: getNextAccount(),
            tokenProgram: getNextAccount(),
            associatedTokenProgram: getNextAccount(),
        },
        data: getInitializeAdminInstructionDataDecoder().decode(
            instruction.data
        ),
    };
}

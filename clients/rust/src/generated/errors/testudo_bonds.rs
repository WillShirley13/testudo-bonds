//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TestudoBondsError {
    /// 0 - Error deserializing an account
    #[error("Error deserializing an account")]
    DeserializationError = 0x0,
    /// 1 - Error serializing an account
    #[error("Error serializing an account")]
    SerializationError = 0x1,
    /// 2 - Invalid program owner. This likely mean the provided account does not exist
    #[error("Invalid program owner. This likely mean the provided account does not exist")]
    InvalidProgramOwner = 0x2,
    /// 3 - Invalid PDA derivation
    #[error("Invalid PDA derivation")]
    InvalidPda = 0x3,
    /// 4 - Expected empty account
    #[error("Expected empty account")]
    ExpectedEmptyAccount = 0x4,
    /// 5 - Expected non empty account
    #[error("Expected non empty account")]
    ExpectedNonEmptyAccount = 0x5,
    /// 6 - Expected signer account
    #[error("Expected signer account")]
    ExpectedSignerAccount = 0x6,
    /// 7 - Expected writable account
    #[error("Expected writable account")]
    ExpectedWritableAccount = 0x7,
    /// 8 - Account mismatch
    #[error("Account mismatch")]
    AccountMismatch = 0x8,
    /// 9 - Invalid account key
    #[error("Invalid account key")]
    InvalidAccountKey = 0x9,
    /// 10 - Numerical overflow
    #[error("Numerical overflow")]
    NumericalOverflow = 0xA,
    /// 11 - Insufficient native tokens
    #[error("Insufficient native tokens")]
    InsufficientTokens = 0xB,
    /// 12 - Invalid bond index
    #[error("Invalid bond index")]
    InvalidBondIndex = 0xC,
    /// 13 - Invalid token accounts
    #[error("Invalid token accounts")]
    InvalidTokenAccounts = 0xD,
    /// 14 - No rewards to claim
    #[error("No rewards to claim")]
    NoRewardsToClaim = 0xE,
    /// 15 - Insufficient rewards
    #[error("Insufficient rewards")]
    InsufficientRewards = 0xF,
    /// 16 - Bond not active
    #[error("Bond not active")]
    BondNotActive = 0x10,
    /// 17 - Max bonds reached
    #[error("Max bonds reached")]
    MaxBondsReached = 0x11,
    /// 18 - Bond operations paused
    #[error("Bond operations paused")]
    BondOperationsPaused = 0x12,
    /// 19 - Bond is active
    #[error("Bond is active")]
    BondIsActive = 0x13,
}

impl solana_program_error::PrintProgramError for TestudoBondsError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for TestudoBondsError {
    fn type_of() -> &'static str {
        "TestudoBondsError"
    }
}


//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct CreateUser {
            /// The program derived address of the user account to create (seeds: ['user', wallet_pubkey])

    
              
          pub user_pda: solana_pubkey::Pubkey,
                /// The wallet of the user

    
              
          pub user_wallet: solana_pubkey::Pubkey,
                /// The system program

    
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl CreateUser {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.user_pda,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.user_wallet,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&CreateUserInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::TESTUDO_BONDS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateUserInstructionData {
            discriminator: u8,
      }

impl CreateUserInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 1,
                  }
  }
}

impl Default for CreateUserInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `CreateUser`.
///
/// ### Accounts:
///
                ///   0. `[writable]` user_pda
                ///   1. `[signer]` user_wallet
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateUserBuilder {
            user_pda: Option<solana_pubkey::Pubkey>,
                user_wallet: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateUserBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// The program derived address of the user account to create (seeds: ['user', wallet_pubkey])
#[inline(always)]
    pub fn user_pda(&mut self, user_pda: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_pda = Some(user_pda);
                    self
    }
            /// The wallet of the user
#[inline(always)]
    pub fn user_wallet(&mut self, user_wallet: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_wallet = Some(user_wallet);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
/// The system program
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CreateUser {
                              user_pda: self.user_pda.expect("user_pda is not set"),
                                        user_wallet: self.user_wallet.expect("user_wallet is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `create_user` CPI accounts.
  pub struct CreateUserCpiAccounts<'a, 'b> {
                  /// The program derived address of the user account to create (seeds: ['user', wallet_pubkey])

      
                    
              pub user_pda: &'b solana_account_info::AccountInfo<'a>,
                        /// The wallet of the user

      
                    
              pub user_wallet: &'b solana_account_info::AccountInfo<'a>,
                        /// The system program

      
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `create_user` CPI instruction.
pub struct CreateUserCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
            /// The program derived address of the user account to create (seeds: ['user', wallet_pubkey])

    
              
          pub user_pda: &'b solana_account_info::AccountInfo<'a>,
                /// The wallet of the user

    
              
          pub user_wallet: &'b solana_account_info::AccountInfo<'a>,
                /// The system program

    
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> CreateUserCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CreateUserCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              user_pda: accounts.user_pda,
              user_wallet: accounts.user_wallet,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.user_pda.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.user_wallet.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&CreateUserInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::TESTUDO_BONDS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user_pda.clone());
                        account_infos.push(self.user_wallet.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateUser` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` user_pda
                ///   1. `[signer]` user_wallet
          ///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateUserCpiBuilder<'a, 'b> {
  instruction: Box<CreateUserCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateUserCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateUserCpiBuilderInstruction {
      __program: program,
              user_pda: None,
              user_wallet: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// The program derived address of the user account to create (seeds: ['user', wallet_pubkey])
#[inline(always)]
    pub fn user_pda(&mut self, user_pda: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_pda = Some(user_pda);
                    self
    }
      /// The wallet of the user
#[inline(always)]
    pub fn user_wallet(&mut self, user_wallet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_wallet = Some(user_wallet);
                    self
    }
      /// The system program
#[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
        let instruction = CreateUserCpi {
        __program: self.instruction.__program,
                  
          user_pda: self.instruction.user_pda.expect("user_pda is not set"),
                  
          user_wallet: self.instruction.user_wallet.expect("user_wallet is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateUserCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            user_pda: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

